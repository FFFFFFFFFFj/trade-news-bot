package bot

import (
	"fmt"
	"log"
	"strings"

	"github.com/FFFFFFFFFFj/trade-news-bot/storage"
)

var AdminIDs = map[int64]bool{
	839986298: true,
}

func (b *Bot) IsAdmin(userID int64) bool {
	return AdminIDs[userID]
}

func (b *Bot) HandleMessage(m *Message) {
	txt := strings.TrimSpace(m.Text)
	switch {
	case txt == "/start":
		b.SendMessage(m.Chat.ID, "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî –≤–∞—à –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π üìàüì∞.\n\n"+
			"‚ö° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É\n"+
			"üëâ /help\n\n"+
			"–î–µ—Ä–∂–∏—Ç–µ —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–∏—Ä–∞ –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π! üöÄüí∞")

	case txt == "/help":
		helpText := "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" +
			"/latest - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–º–µ—á–µ–Ω—ã –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏)\n" +
			"/subscribe <URL> - –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫\n" +
			"/unsubscribe <URL> - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞\n" +
			"/mysources - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"

		if b.IsAdmin(m.Chat.ID) {
			helpText += "\n(–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã)\n" +
				"/addsource <URL>\n" +
				"/removesource <URL>\n" +
				"/listsources"
		}
		b.SendMessage(m.Chat.ID, helpText)

	case txt == "/latest":
		limit := 5
		items, err := storage.GetUnreadNews(b.db, m.Chat.ID, limit)
		if err != nil {
			b.SendMessage(m.Chat.ID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
			log.Printf("GetUnreadNews error: %v", err)
			return
		}
		if len(items) == 0 {
			b.SendMessage(m.Chat.ID, "üö´ –°–µ–π—á–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≤–∞—Å.")
			return
		}
		for _, item := range items {
			msg := fmt.Sprintf("üìå %s\nüïí %s\nüîó %s\n\n", item.Title, item.PubDate, item.Link)
			err = b.SendMessage(m.Chat.ID, msg)
			if err != nil {
				log.Printf("SendMessage error: %v", err)
				continue
			}
			err = storage.MarkNewsAsRead(b.db, m.Chat.ID, item.Link)
			if err != nil {
				log.Printf("MarkNewsAsRead error: %v", err)
			}
		}

	case strings.HasPrefix(txt, "/addsource"):
		if !b.IsAdmin(m.Chat.ID) {
			b.SendMessage(m.Chat.ID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			return
		}
		parts := strings.Fields(txt)
		if len(parts) < 2 {
			b.SendMessage(m.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addsource <URL>")
			return
		}
		url := parts[1]
		err := storage.AddSource(b.db, url, m.Chat.ID)
		if err != nil {
			b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
			log.Printf("AddSource error: %v", err)
			return
		}
		b.SendMessage(m.Chat.ID, "–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

	case strings.HasPrefix(txt, "/removesource"):
		if !b.IsAdmin(m.Chat.ID) {
			b.SendMessage(m.Chat.ID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			return
		}
		parts := strings.Fields(txt)
		if len(parts) < 2 {
			b.SendMessage(m.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removesource <URL>")
			return
		}
		url := parts[1]
		err := storage.RemoveSource(b.db, url)
		if err != nil {
			b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
			log.Printf("RemoveSource error: %v", err)
			return
		}
		b.SendMessage(m.Chat.ID, "–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")

	case txt == "/listsources":
		if !b.IsAdmin(m.Chat.ID) {
			b.SendMessage(m.Chat.ID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
			return
		}
		sources, err := storage.GetAllSources(b.db)
		if err != nil {
			b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
			log.Printf("GetAllSources error: %v", err)
			return
		}
		if len(sources) == 0 {
			b.SendMessage(m.Chat.ID, "–°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—É—Å—Ç.")
			return
		}
		b.SendMessage(m.Chat.ID, "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:\n"+strings.Join(sources, "\n"))

	// --- –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
	case strings.HasPrefix(txt, "/subscribe"):
		parts := strings.Fields(txt)
		if len(parts) < 2 {
			b.SendMessage(m.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /subscribe <URL>")
			return
		}
		url := parts[1]
		err := storage.Subscribe(b.db, m.Chat.ID, url)
		if err != nil {
			b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
			log.Printf("Subscribe error for %d: %v", m.Chat.ID, err)
			return
		}
		b.SendMessage(m.Chat.ID, "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫.")

	case strings.HasPrefix(txt, "/unsubscribe"):
		parts := strings.Fields(txt)
		if len(parts) < 2 {
			b.SendMessage(m.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unsubscribe <URL>")
			return
		}
		url := parts[1]
		err := storage.Unsubscribe(b.db, m.Chat.ID, url)
		if err != nil {
			b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ: –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")
			log.Printf("Unsubscribe error for %d: %v", m.Chat.ID, err)
			return
		}
		b.SendMessage(m.Chat.ID, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")

	case txt == "/mysources":
		urls, err := storage.GetUserSources(b.db, m.Chat.ID)
		if err != nil {
			b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
			log.Printf("GetUserSources error for %d: %v", m.Chat.ID, err)
			return
		}
		if len(urls) == 0 {
			b.SendMessage(m.Chat.ID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.")
			return
		}
		b.SendMessage(m.Chat.ID, "–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n"+strings.Join(urls, "\n"))

	default:
		log.Printf("Got message: %s", txt)
	}
}
