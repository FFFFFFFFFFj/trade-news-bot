package bot

import (
	"fmt"
	"log"
	"net/url"
	"strings"

	"gopkg.in/telebot.v3"

	"github.com/FFFFFFFFFFj/trade-news-bot/storage"
)

var AdminIDs = map[int64]bool{
	839986298: true, // —Ç–≤–æ–π Telegram ID
}

func (b *Bot) IsAdmin(userID int64) bool {
	return AdminIDs[userID]
}

func (b *Bot) HandleMessage(m *telebot.Message) {
	txt := strings.TrimSpace(m.Text)

	// 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ pending actions
	if action, ok := b.getPending(m.Chat.ID); ok && !strings.HasPrefix(txt, "/") {
		switch action {
		case "addsource":
			if !b.IsAdmin(m.Chat.ID) {
				b.SendMessage(m.Chat.ID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
				b.clearPending(m.Chat.ID)
				return
			}
			err := storage.AddSource(b.db, txt, m.Chat.ID)
			if err != nil {
				b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
				log.Printf("AddSource error: %v", err)
			} else {
				b.SendMessage(m.Chat.ID, "–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
			}
			b.clearPending(m.Chat.ID)
			return

		case "removesource":
			if !b.IsAdmin(m.Chat.ID) {
				b.SendMessage(m.Chat.ID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
				b.clearPending(m.Chat.ID)
				return
			}
			err := storage.RemoveSource(b.db, txt)
			if err != nil {
				b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
				log.Printf("RemoveSource error: %v", err)
			} else {
				b.SendMessage(m.Chat.ID, "–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
			}
			b.clearPending(m.Chat.ID)
			return
		}
	}

	// 2) –ö–æ–º–∞–Ω–¥—ã
	switch {
	case txt == "/start":
		subsCount, _ := storage.GetUserSubscriptionCount(b.db, m.Chat.ID)

		if b.IsAdmin(m.Chat.ID) {
			activeUsers, _ := storage.GetActiveUsersCount(b.db)
			msg := fmt.Sprintf(
				"üëë –ê–¥–º–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å\nüÜî Telegram ID: %d\nüìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n\n–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:\n/addsource\n/removesource\n/listsources\n\n–ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/mysources\n/latest\n/help",
				m.Chat.ID, activeUsers,
			)
			b.SendMessage(m.Chat.ID, msg)
		} else {
			msg := fmt.Sprintf(
				"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\nüÜî Telegram ID: %d\nüìå –ü–æ–¥–ø–∏—Å–æ–∫: %d\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/mysources\n/latest\n/help",
				m.Chat.ID, subsCount,
			)
			b.SendMessage(m.Chat.ID, msg)
		}

	case txt == "/help":
		helpText := "/start - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n" +
			"/latest - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n" +
			"/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" +
			"/mysources - –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
		if b.IsAdmin(m.Chat.ID) {
			helpText += "\n(–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã)\n" +
				"/addsource - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n" +
				"/removesource - —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n" +
				"/listsources - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
		}
		b.SendMessage(m.Chat.ID, helpText)

	case txt == "/latest":
		items, _ := storage.GetUnreadNews(b.db, m.Chat.ID, 5)
		if len(items) == 0 {
			b.SendMessage(m.Chat.ID, "üö´ –°–µ–π—á–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –≤–∞—Å.")
			return
		}
		for _, item := range items {
			msg := fmt.Sprintf("üìå %s\nüïí %s\nüîó %s\n\n", item.Title, item.PubDate, item.Link)
			b.SendMessage(m.Chat.ID, msg)
			_ = storage.MarkNewsAsRead(b.db, m.Chat.ID, item.Link)
		}

	case txt == "/mysources":
		allSources, _ := storage.GetAllSources(b.db)
		userSources, _ := storage.GetUserSources(b.db, m.Chat.ID)

		// –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
		userSet := make(map[string]bool)
		for _, s := range userSources {
			userSet[s] = true
		}

		var rows [][]telebot.InlineButton
		for _, src := range allSources {
			u, _ := url.Parse(src)
			label := u.Host

			if userSet[src] {
				label = "‚úÖ " + label
			}

			btn := telebot.InlineButton{
				Text:   label,
				Data:   "toggle:" + src,
			}
			rows = append(rows, []telebot.InlineButton{btn})
		}

		markup := &telebot.ReplyMarkup{InlineKeyboard: rows}
		b.bot.Send(m.Chat, "–í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:", markup)

	case txt == "/cancel":
		if _, ok := b.getPending(m.Chat.ID); ok {
			b.clearPending(m.Chat.ID)
			b.SendMessage(m.Chat.ID, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
		} else {
			b.SendMessage(m.Chat.ID, "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
		}

	default:
		log.Printf("Got message: %s", txt)
	}
}
