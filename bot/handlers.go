package bot

import (
	"fmt"
	"log"
	"strings"

	//"github.com/FFFFFFFFFFj/trade-news-bot/rss"
	"github.com/FFFFFFFFFFj/trade-news-bot/storage"
)

func (b *Bot) HandleMessage(m *Message) {
	txt := strings.TrimSpace(m.Text)
	switch txt {
	case "/start":
		b.SendMessage(m.Chat.ID, "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø ‚Äî –≤–∞—à –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ üìàüì∞.\n\n"+
			"‚ö° –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É\n"+
			"üëâ /help\n\n"+
			"–î–µ—Ä–∂–∏—Ç–µ —Ä—É–∫—É –Ω–∞ –ø—É–ª—å—Å–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –º–∏—Ä–∞ –≤–º–µ—Å—Ç–µ —Å–æ –º–Ω–æ–π! üöÄüí∞")

	case "/help":
		helpText := "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n" +
			"/latest - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n" +
			"/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
		b.SendMessage(m.Chat.ID, helpText)

	case "/latest":
		limit := 5
		items, err := storage.GetLatestNews(b.db, limit)
		if err != nil {
			b.SendMessage(m.Chat.ID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
			log.Printf("GetLatestNews error: %v", err)
			return
		}
		if len(items) == 0 {
			b.SendMessage(m.Chat.ID, "üö´ –°–µ–π—á–∞—Å –≤ –±–∞–∑–µ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
			return
		}
		var sb strings.Builder
		count := 0
		for _, item := range items {
			if b.Sent[item.Link] {
				continue // —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏
			}
			sb.WriteString(fmt.Sprintf("üìå %s\nüïí %s\nüîó %s\n\n",
				item.Title,
				item.PubDate,
				item.Link))
			b.Sent[item.Link] = true
			count++
		}
		if count == 0 {
			b.SendMessage(m.Chat.ID, "üö´ –ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
            return
		}
		b.SendMessage(m.Chat.ID, sb.String())

	default:
		log.Printf("Got message: %s", txt)
	}
}
