package bot

import (
	"fmt"
	"log"
	"net/url"
	"strings"

	"github.com/FFFFFFFFFFj/trade-news-bot/storage"
	tb "gopkg.in/telebot.v3"
)

var AdminIDs = map[int64]bool{
	839986298: true,
}

func (b *Bot) IsAdmin(userID int64) bool {
	return AdminIDs[userID]
}

func (b *Bot) HandleMessage(m *Message) {
	txt := strings.TrimSpace(m.Text)

	// Pending actions
	if action, ok := b.getPending(m.Chat.ID); ok && !strings.HasPrefix(txt, "/") {
		switch action {
		case "addsource":
			if !b.IsAdmin(m.Chat.ID) {
				b.SendMessage(m.Chat.ID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
				b.clearPending(m.Chat.ID)
				return
			}
			err := storage.AddSource(b.db, txt, m.Chat.ID)
			if err != nil {
				b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
			} else {
				b.SendMessage(m.Chat.ID, "–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
			}
			b.clearPending(m.Chat.ID)
			return

		case "removesource":
			if !b.IsAdmin(m.Chat.ID) {
				b.SendMessage(m.Chat.ID, "üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
				b.clearPending(m.Chat.ID)
				return
			}
			err := storage.RemoveSource(b.db, txt)
			if err != nil {
				b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.")
			} else {
				b.SendMessage(m.Chat.ID, "–ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
			}
			b.clearPending(m.Chat.ID)
			return

		default:
			b.clearPending(m.Chat.ID)
		}
	}

	switch {
	case txt == "/start":
		_ = storage.AddUserIfNotExists(b.db, m.Chat.ID)

		subsCount, _ := storage.GetUserSubscriptionCount(b.db, m.Chat.ID)

		if b.IsAdmin(m.Chat.ID) {
			activeUsers, _ := storage.GetActiveUsersCount(b.db)
			totalUsers, _ := storage.GetTotalUsersCount(b.db)

			msg := fmt.Sprintf(
				"üëë –ê–¥–º–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å\nüÜî Telegram ID: %d\nüìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\nüåê –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–∞–∂–∞–≤—à–∏—Ö /start: %d\n\n"+
					"–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:\n/addsource\n/removesource\n/listsources\n\n"+
					"–ü—É–±–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/mysources\n/subscribe\n/unsubscribe\n/latest\n/help",
				m.Chat.ID, activeUsers, totalUsers)
			b.SendMessage(m.Chat.ID, msg)
		} else {
			msg := fmt.Sprintf(
				"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\nüÜî Telegram ID: %d\nüìå –ü–æ–¥–ø–∏—Å–æ–∫: %d\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/mysources\n/subscribe\n/unsubscribe\n/latest\n/help",
				m.Chat.ID, subsCount)
			b.SendMessage(m.Chat.ID, msg)
		}
		return

	case txt == "/help":
		helpText := "/start - –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n/latest - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/mysources - –º–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
		if b.IsAdmin(m.Chat.ID) {
			helpText += "/addsource - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n/removesource - —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n/listsources - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
		}
		b.SendMessage(m.Chat.ID, helpText)

	case txt == "/latest":
		limit := 5
		items, err := storage.GetUnreadNews(b.db, m.Chat.ID, limit)
		if err != nil {
			b.SendMessage(m.Chat.ID, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
			return
		}
		if len(items) == 0 {
			b.SendMessage(m.Chat.ID, "üö´ –°–µ–π—á–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
			return
		}
		for _, item := range items {
			msg := fmt.Sprintf("üìå %s\nüïí %s\nüîó %s\n\n", item.Title, item.PubDate, item.Link)
			b.SendMessage(m.Chat.ID, msg)
			storage.MarkNewsAsRead(b.db, m.Chat.ID, item.Link)
		}

	case txt == "/mysources":
		allSources, err := storage.GetAllSources(b.db)
		if err != nil {
			b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
			return
		}
		userSources, err := storage.GetUserSources(b.db, m.Chat.ID)
		if err != nil {
			b.SendMessage(m.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
			return
		}

		var buttons [][]tb.InlineButton
		for _, src := range allSources {
			displayName := src
			if u, err := url.Parse(src); err == nil {
				displayName = u.Host
			}
			prefix := ""
			if contains(userSources, src) {
				prefix = "‚úÖ "
			}
			btn := tb.InlineButton{
				Unique: "toggle_" + displayName,
				Text:   prefix + displayName,
				Data:   src,
			}
			buttons = append(buttons, []tb.InlineButton{btn})
		}
		b.SendInlineButtons(m.Chat.ID, "–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:", buttons)

	case txt == "/cancel":
		if _, ok := b.getPending(m.Chat.ID); ok {
			b.clearPending(m.Chat.ID)
			b.SendMessage(m.Chat.ID, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
		} else {
			b.SendMessage(m.Chat.ID, "–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")
		}

	default:
		log.Printf("Got message: %s", txt)
	}
}
