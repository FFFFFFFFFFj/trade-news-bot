package bot

import (
	"fmt"
	"log"
	"strings"

	"github.com/FFFFFFFFFFj/trade-news-bot/storage"
	tb "gopkg.in/telebot.v3"
)

func (b *Bot) HandleMessage(m *tb.Message) {
	userID := m.Chat.ID
	_, _ = b.db.Exec(`INSERT INTO users (id) VALUES ($1) ON CONFLICT DO NOTHING`, userID)
	txt := strings.TrimSpace(m.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –≤–≤–æ–¥ URL –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
	if mode, ok := b.pending[userID]; ok && b.IsAdmin(userID) {
		switch mode {
		case "addsource":
			if txt == "" {
				b.SendMessage(userID, "‚ö†Ô∏è URL –ø—É—Å—Ç–æ–π")
				return
			}
			if err := storage.AddSource(b.db, txt); err != nil {
				b.SendMessage(userID, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
			} else {
				b.SendMessage(userID, "‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: "+txt)
			}
			b.pending[userID] = ""
			return
		case "removesource":
			if txt == "" {
				b.SendMessage(userID, "‚ö†Ô∏è URL –ø—É—Å—Ç–æ–π")
				return
			}
			if err := storage.RemoveSource(b.db, txt); err != nil {
				b.SendMessage(userID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
			} else {
				b.SendMessage(userID, "‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞–ª—ë–Ω: "+txt)
			}
			b.pending[userID] = ""
			return
		case "broadcast":
			if txt == "" {
				b.SendMessage(userID, "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
				return
			}
			b.pending[userID] = txt
			b.HandleAdminBroadcast(&tb.Callback{Sender: m.Sender}) // –≤—ã–∑–æ–≤ —Ä–∞—Å—Å—ã–ª–∫–∏
			return
		}
	}

	switch {
	case txt == "/start":
		if b.IsAdmin(userID) {
			b.ShowAdminMenu(userID) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
			usersCount, _ := storage.GetUsersCount(b.db)
			activeUsers, _ := storage.GetActiveUsersCount(b.db)
			autopostUsers, _ := storage.GetAutopostUsersCount(b.db)
			msg := fmt.Sprintf("üëë –ê–¥–º–∏–Ω\nID: %d\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö: %d\n–° –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–º: %d\n–í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %d",
				userID, usersCount, activeUsers, autopostUsers, len(storage.MustGetAllSources(b.db)))
			b.SendMessage(userID, msg)
		} else {
			subsCount, _ := storage.GetUserSubscriptionCount(b.db, userID)
			msg := fmt.Sprintf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\nID: %d\n–ü–æ–¥–ø–∏—Å–æ–∫: %d", userID, subsCount)
			b.SendMessage(userID, msg)
		}

	case txt == "/help":
		b.SendMessage(userID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"+
			"/start ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n"+
			"/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"+
			"/latest ‚Äì –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"+
			"/mysources ‚Äì —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n"+
			"/autopost ‚Äì –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏\n")

	case strings.HasPrefix(txt, "/autopost "):
		parts := strings.Fields(txt)[1:]
		var validTimes []string
		for _, p := range parts {
			if len(p) == 5 && p[2] == ':' {
				validTimes = append(validTimes, p)
			}
		}
		if len(validTimes) > 6 {
			b.SendMessage(userID, "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 6 –≤—Ä–µ–º—ë–Ω")
		} else if len(validTimes) == 0 {
			b.SendMessage(userID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
		} else {
			_ = storage.SetUserAutopost(b.db, userID, validTimes)
			b.SendMessage(userID, "‚úÖ –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: "+strings.Join(validTimes, ", "))
		}

	case txt == "/autopost":
		b.ShowAutopostMenu(userID)

	case txt == "/latest":
		b.latestPage[userID] = 1
		b.ShowLatestNews(userID, nil)

	case txt == "/mysources":
		b.ShowSourcesMenu(userID)

	default:
		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ: %s", txt)
	}
}

// ---------------------- –ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ ----------------------

func (b *Bot) ShowAdminMenu(chatID int64) {
	if !b.IsAdmin(chatID) {
		return
	}

	markup := &tb.ReplyMarkup{}
	btnAdd := tb.InlineButton{
		Unique: "admin_addsource",
		Text:   "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫",
	}
	btnRemove := tb.InlineButton{
		Unique: "admin_removesource",
		Text:   "‚ûñ –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫",
	}
	btnBroadcast := tb.InlineButton{
		Unique: "admin_broadcast",
		Text:   "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º",
	}

	markup.InlineKeyboard = [][]tb.InlineButton{
		{btnAdd, btnRemove},
		{btnBroadcast},
	}

	_, _ = b.bot.Send(tb.ChatID(chatID), "üëë –ê–¥–º–∏–Ω-–º–µ–Ω—é:", markup)

	// –ü—Ä–∏–≤—è–∑–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫ —Ä–µ–∂–∏–º–∞–º pending
	b.bot.Handle(&btnAdd, func(c tb.Context) error {
		b.pending[chatID] = "addsource"
		return c.Respond(&tb.CallbackResponse{Text: "–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞"})
	})
	b.bot.Handle(&btnRemove, func(c tb.Context) error {
		b.pending[chatID] = "removesource"
		return c.Respond(&tb.CallbackResponse{Text: "–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞"})
	})
	b.bot.Handle(&btnBroadcast, func(c tb.Context) error {
		b.pending[chatID] = "broadcast"
		return c.Respond(&tb.CallbackResponse{Text: "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"})
	})
}
