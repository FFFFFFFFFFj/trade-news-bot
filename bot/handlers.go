package bot

import (
	"fmt"
	"log"
	"strings"

	"github.com/FFFFFFFFFFj/trade-news-bot/storage"
	tb "gopkg.in/telebot.v3"
)

func (b *Bot) HandleMessage(m *tb.Message) {
	userID := m.Chat.ID
	_, _ = b.db.Exec(`INSERT INTO users (id) VALUES ($1) ON CONFLICT DO NOTHING`, userID)

	txt := strings.TrimSpace(m.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –∞–¥–º–∏–Ω –≤–≤–æ–¥ URL –∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
	if mode, ok := b.pending[userID]; ok && b.IsAdmin(userID) {
		switch mode {
		case "addsource":
			if txt == "" {
				b.SendMessage(userID, "‚ö†Ô∏è URL –ø—É—Å—Ç–æ–π")
				return
			}
			if err := storage.AddSource(b.db, txt); err != nil {
				b.SendMessage(userID, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
			} else {
				b.SendMessage(userID, "‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: "+txt)
			}
			b.pending[userID] = ""
			return

		case "removesource":
			if txt == "" {
				b.SendMessage(userID, "‚ö†Ô∏è URL –ø—É—Å—Ç–æ–π")
				return
			}
			if err := storage.RemoveSource(b.db, txt); err != nil {
				b.SendMessage(userID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
			} else {
				b.SendMessage(userID, "‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞–ª—ë–Ω: "+txt)
			}
			b.pending[userID] = ""
			return

		case "broadcast":
			if txt == "" {
				b.SendMessage(userID, "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
				return
			}
			count := b.BroadcastMessageToAll(txt)
			b.SendMessage(userID, fmt.Sprintf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", count))
			b.pending[userID] = ""
			return
		}
	}

	switch {
	case txt == "/start":
		if b.IsAdmin(userID) {
			usersCount, _ := storage.GetUsersCount(b.db)
			activeUsers, _ := storage.GetActiveUsersCount(b.db)
			autopostUsers, _ := storage.GetAutopostUsersCount(b.db)
			msg := fmt.Sprintf("üëë –ê–¥–º–∏–Ω\nID: %d\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d\n–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö: %d\n–° –∞–≤—Ç–æ–ø–æ—Å—Ç–æ–º: %d\n–í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %d",
				userID, usersCount, activeUsers, autopostUsers, len(storage.MustGetAllSources(b.db)))
			b.SendMessage(userID, msg)
		} else {
			subsCount, _ := storage.GetUserSubscriptionCount(b.db, userID)
			msg := fmt.Sprintf("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\nID: %d\n–ü–æ–¥–ø–∏—Å–æ–∫: %d", userID, subsCount)
			b.SendMessage(userID, msg)
		}

	case txt == "/help":
		helpMsg := "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
			"/start ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å\n" +
			"/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" +
			"/latest ‚Äì –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n" +
			"/mysources ‚Äì —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n" +
			"/autopost ‚Äì –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏\n"
		if b.IsAdmin(userID) {
			helpMsg += "\n–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n" +
				"/addsource ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n" +
				"/removesource ‚Äì —É–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫\n" +
				"/listsources ‚Äì —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n" +
				"/broadcast ‚Äì —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º\n"
		}
		b.SendMessage(userID, helpMsg)

	case txt == "/autopost":
		b.ShowAutopostMenu(userID)

	case strings.HasPrefix(txt, "/autopost "):
		parts := strings.Fields(txt)[1:]
		var validTimes []string
		for _, p := range parts {
			if len(p) == 5 && p[2] == ':' {
				validTimes = append(validTimes, p)
			}
		}
		if len(validTimes) > 6 {
			b.SendMessage(userID, "‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 6 –≤—Ä–µ–º—ë–Ω")
		} else if len(validTimes) == 0 {
			b.SendMessage(userID, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
		} else {
			_ = storage.SetUserAutopost(b.db, userID, validTimes)
			b.SendMessage(userID, "‚úÖ –í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: "+strings.Join(validTimes, ", "))
		}

	case txt == "/latest":
		b.latestPage[userID] = 1
		b.ShowLatestNews(userID, nil)

	case txt == "/mysources":
		b.ShowSourcesMenu(userID)

	case txt == "/addsource":
		if !b.IsAdmin(userID) {
			return
		}
		b.pending[userID] = "addsource"
		b.SendMessage(userID, "–í–≤–µ–¥–∏—Ç–µ URL –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:")

	case txt == "/removesource":
		if !b.IsAdmin(userID) {
			return
		}
		b.pending[userID] = "removesource"
		b.SendMessage(userID, "–í–≤–µ–¥–∏—Ç–µ URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

	case txt == "/broadcast":
		if !b.IsAdmin(userID) {
			return
		}
		b.pending[userID] = "broadcast"
		b.SendMessage(userID, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")

	case txt == "/listsources":
		if !b.IsAdmin(userID) {
			return
		}
		sources := storage.MustGetAllSources(b.db)
		if len(sources) == 0 {
			b.SendMessage(userID, "–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		} else {
			msg := "–°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n" + strings.Join(sources, "\n")
			b.SendMessage(userID, msg)
		}

	default:
		log.Printf("–°–æ–æ–±—â–µ–Ω–∏–µ: %s", txt)
	}
}

// BroadcastMessageToAll —Ä–∞–∑—Å—ã–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (b *Bot) BroadcastMessageToAll(msg string) int {
	rows, err := b.db.Query(`SELECT id FROM users`)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %v", err)
		return 0
	}
	defer rows.Close()

	count := 0
	for rows.Next() {
		var uid int64
		if err := rows.Scan(&uid); err == nil {
			b.SendMessage(uid, msg)
			count++
		}
	}
	return count
}
