package bot

import (
	"database/sql"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/FFFFFFFFFFj/trade-news-bot/storage"
	tb "gopkg.in/telebot.v3"
)

type Bot struct {
	bot        *tb.Bot
	db         *sql.DB
	pending    map[int64]string
	latestPage map[int64]int

	// –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
	btnFirst tb.InlineButton
	btnPrev  tb.InlineButton
	btnNext  tb.InlineButton
	btnLast  tb.InlineButton

	btnAddSource    tb.InlineButton
	btnRemoveSource tb.InlineButton
	btnBroadcast    tb.InlineButton
}

var AdminIDs = map[int64]bool{
	839986298: true,
}

// New —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
func New(token string, db *sql.DB) *Bot {
	pref := tb.Settings{
		Token:  token,
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	}

	b, err := tb.NewBot(pref)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞: %v", err)
	}

	botInstance := &Bot{
		bot:        b,
		db:         db,
		pending:    make(map[int64]string),
		latestPage: make(map[int64]int),

		// –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è /latest
		btnFirst: tb.InlineButton{Unique: "latest_first", Text: "‚èÆ"},
		btnPrev:  tb.InlineButton{Unique: "latest_prev", Text: "‚¨ÖÔ∏è"},
		btnNext:  tb.InlineButton{Unique: "latest_next", Text: "‚û°Ô∏è"},
		btnLast:  tb.InlineButton{Unique: "latest_last", Text: "‚è≠"},

		// –ê–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∏
		btnAddSource:    tb.InlineButton{Unique: "admin_add_source", Text: "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"},
		btnRemoveSource: tb.InlineButton{Unique: "admin_remove_source", Text: "‚ûñ –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫"},
		btnBroadcast:    tb.InlineButton{Unique: "admin_broadcast", Text: "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º"},
	}

	// –ü—Ä–∏–≤—è–∑–∫–∞ –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫ –∫ –º–µ—Ç–æ–¥–∞–º Bot
	botInstance.bot.Handle(&botInstance.btnAddSource, botInstance.HandleAdminSource)
	botInstance.bot.Handle(&botInstance.btnRemoveSource, botInstance.HandleAdminSource)
	botInstance.bot.Handle(&botInstance.btnBroadcast, botInstance.HandleAdminBroadcast)

	// –ù–∞–≤–∏–≥–∞—Ü–∏—è /latest
	botInstance.bot.Handle(&botInstance.btnFirst, func(c tb.Context) error {
		chatID := c.Sender().ID
		botInstance.latestPage[chatID] = 1
		botInstance.ShowLatestNews(chatID, c)
		return nil
	})
	botInstance.bot.Handle(&botInstance.btnPrev, func(c tb.Context) error {
		chatID := c.Sender().ID
		if botInstance.latestPage[chatID] > 1 {
			botInstance.latestPage[chatID]--
		}
		botInstance.ShowLatestNews(chatID, c)
		return nil
	})
	botInstance.bot.Handle(&botInstance.btnNext, func(c tb.Context) error {
		chatID := c.Sender().ID
		botInstance.latestPage[chatID]++
		botInstance.ShowLatestNews(chatID, c)
		return nil
	})
	botInstance.bot.Handle(&botInstance.btnLast, func(c tb.Context) error {
		chatID := c.Sender().ID
		totalCount, _ := storage.GetTodayNewsCountForUser(botInstance.db, chatID)
		pageSize := 4
		totalPages := (totalCount + pageSize - 1) / pageSize
		if totalPages < 1 {
			totalPages = 1
		}
		botInstance.latestPage[chatID] = totalPages
		botInstance.ShowLatestNews(chatID, c)
		return nil
	})

	return botInstance
}
// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() {
	b.bot.Handle(tb.OnText, func(c tb.Context) error {
		b.HandleMessage(c.Message())
		return nil
	})

	b.bot.Handle(tb.OnCallback, func(c tb.Context) error {
		data := c.Callback().Data
		if strings.HasPrefix(data, "toggle:") {
			return b.ToggleSource(c)
		}
		if strings.HasPrefix(data, "autopost:") {
			return b.HandleAutopost(c)
		}
		if strings.HasPrefix(data, "admin_add:") || strings.HasPrefix(data, "admin_remove:") {
			return b.HandleAdminSource(c)
		}
		if strings.HasPrefix(data, "admin_broadcast:") {
			return b.HandleAdminBroadcast(c)
		}
		return nil
	})

	log.Println("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
	b.bot.Start()
}

// IsAdmin –ø—Ä–æ–≤–µ—Ä–∫–∞
func (b *Bot) IsAdmin(userID int64) bool {
	return AdminIDs[userID]
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *Bot) SendMessage(chatID int64, text string) {
	_, err := b.bot.Send(tb.ChatID(chatID), text)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}
// ---------------------- –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã ----------------------

// HandleAdminSource ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
func (b *Bot) HandleAdminSource(c tb.Context) error {
	userID := c.Sender().ID
	if !b.IsAdmin(userID) {
		return c.Respond(&tb.CallbackResponse{Text: "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"})
	}

	data := c.Callback().Data

	if strings.HasPrefix(data, "admin:addsource:") {
		url := strings.TrimPrefix(data, "admin:addsource:")
		if url == "" {
			return c.Respond(&tb.CallbackResponse{Text: "‚ö†Ô∏è URL –ø—É—Å—Ç–æ–π"})
		}
		if err := storage.AddSource(b.db, url); err != nil {
			return c.Respond(&tb.CallbackResponse{Text: "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"})
		}
		return c.Respond(&tb.CallbackResponse{Text: "‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω: " + url})
	}

	if strings.HasPrefix(data, "admin:removesource:") {
		url := strings.TrimPrefix(data, "admin:removesource:")
		if url == "" {
			return c.Respond(&tb.CallbackResponse{Text: "‚ö†Ô∏è URL –ø—É—Å—Ç–æ–π"})
		}
		if err := storage.RemoveSource(b.db, url); err != nil {
			return c.Respond(&tb.CallbackResponse{Text: "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è"})
		}
		return c.Respond(&tb.CallbackResponse{Text: "‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —É–¥–∞–ª—ë–Ω: " + url})
	}

	return nil
}

// HandleAdminBroadcast ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
func (b *Bot) HandleAdminBroadcast(c tb.Context) error {
	userID := c.Sender().ID
	if !b.IsAdmin(userID) {
		return c.Respond(&tb.CallbackResponse{Text: "‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"})
	}

	// —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ pending
	msg, ok := b.pending[userID]
	if !ok || msg == "" {
		return c.Respond(&tb.CallbackResponse{Text: "‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"})
	}

	// –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	rows, err := b.db.Query(`SELECT id FROM users`)
	if err != nil {
		return c.Respond(&tb.CallbackResponse{Text: "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"})
	}
	defer rows.Close()

	count := 0
	for rows.Next() {
		var uid int64
		if err := rows.Scan(&uid); err == nil {
			b.SendMessage(uid, msg)
			count++
		}
	}

	// –æ—á–∏—â–∞–µ–º pending
	b.pending[userID] = ""

	return c.Respond(&tb.CallbackResponse{Text: fmt.Sprintf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–∑–æ—Å–ª–∞–Ω–æ %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", count)})
}

// ShowSourcesMenu –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
func (b *Bot) ShowSourcesMenu(chatID int64) {
	_, _ = b.db.Exec(`INSERT INTO users (id) VALUES ($1) ON CONFLICT DO NOTHING`, chatID)

	allSources := storage.MustGetAllSources(b.db)
	userSources, _ := storage.GetUserSources(b.db, chatID)
	userSet := make(map[string]bool)
	for _, s := range userSources {
		userSet[s] = true
	}

	var rows [][]tb.InlineButton
	for _, src := range allSources {
		label := src
		if userSet[src] {
			label = "‚úÖ " + label
		} else {
			label = "‚ùå " + label
		}
		btn := tb.InlineButton{
			Text: label,
			Data: "toggle:" + src,
		}
		rows = append(rows, []tb.InlineButton{btn})
	}

	markup := &tb.ReplyMarkup{InlineKeyboard: rows}
	_, _ = b.bot.Send(tb.ChatID(chatID), "–í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:", markup)
}

// ToggleSource –ø–æ–¥–ø–∏—Å–∫–∞/–æ—Ç–ø–∏—Å–∫–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
func (b *Bot) ToggleSource(c tb.Context) error {
	data := c.Callback().Data
	userID := c.Sender().ID

	src := strings.TrimPrefix(data, "toggle:")
	subs, _ := storage.GetUserSources(b.db, userID)
	isSub := false
	for _, s := range subs {
		if s == src {
			isSub = true
			break
		}
	}

	if isSub {
		_ = storage.Unsubscribe(b.db, userID, src)
		_ = c.Respond(&tb.CallbackResponse{Text: "‚ùå –û—Ç–ø–∏—Å–∫–∞"})
	} else {
		_ = storage.Subscribe(b.db, userID, src)
		_ = c.Respond(&tb.CallbackResponse{Text: "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞"})
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	b.ShowSourcesMenu(userID)
	return nil
}

// ShowLatestNews –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è
func (b *Bot) ShowLatestNews(chatID int64, c tb.Context) error {
	page := b.latestPage[chatID]
	pageSize := 4

	totalCount, _ := storage.GetTodayNewsCountForUser(b.db, chatID)
	totalPages := (totalCount + pageSize - 1) / pageSize
	if totalPages == 0 {
		msg := "‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤–∞—à–∏–º –ø–æ–¥–ø–∏—Å–∫–∞–º –Ω–µ—Ç."
		if c != nil {
			_, _ = b.bot.Edit(c.Message(), msg)
		} else {
			b.SendMessage(chatID, msg)
		}
		return nil
	}

	if page > totalPages {
		b.latestPage[chatID] = totalPages
		page = totalPages
	}

	items, _ := storage.GetTodayNewsPageForUser(b.db, chatID, page, pageSize)
	if len(items) == 0 {
		msg := "‚ö†Ô∏è –ë–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç."
		if c != nil {
			_, _ = b.bot.Edit(c.Message(), msg)
		} else {
			b.SendMessage(chatID, msg)
		}
		return nil
	}

	text := fmt.Sprintf("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d –∏–∑ %d):\n\n", page, totalPages)
	for _, item := range items {
		text += fmt.Sprintf("‚Ä¢ %s\nüîó %s\n\n", item.Title, item.Link)
	}

	markup := &tb.ReplyMarkup{}
	var row []tb.InlineButton
	if page > 1 {
		row = append(row, b.btnFirst, b.btnPrev)
	}
	if page < totalPages {
		row = append(row, b.btnNext, b.btnLast)
	}
	if len(row) > 0 {
		markup.InlineKeyboard = [][]tb.InlineButton{row}
	}

	if c != nil {
		_, _ = b.bot.Edit(c.Message(), text, markup)
	} else {
		_, _ = b.bot.Send(tb.ChatID(chatID), text, markup)
	}
	return nil
}

// ShowAutopostMenu ‚Äî –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏
func (b *Bot) ShowAutopostMenu(chatID int64) {
	times, _ := storage.GetUserAutopost(b.db, chatID)
	msg := "üïí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π (–ø–æ –ú–°–ö).\n–ú–∞–∫—Å–∏–º—É–º 6 —Ä–∞–∑ –≤ –¥–µ–Ω—å.\n–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é: /autopost 10:30 15:45\n\n–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ: "
	if len(times) == 0 {
		msg += "‚ùå –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
	} else {
		msg += strings.Join(times, ", ")
	}

	markup := &tb.ReplyMarkup{}
	rows := [][]tb.InlineButton{{{Text: "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å", Data: "autopost:disable"}}}
	var row []tb.InlineButton
	for h := 0; h < 24; h++ {
		t := fmt.Sprintf("%02d:00", h)
		row = append(row, tb.InlineButton{Text: t, Data: "autopost:set:" + t})
		if len(row) == 4 {
			rows = append(rows, row)
			row = []tb.InlineButton{}
		}
	}
	if len(row) > 0 {
		rows = append(rows, row)
	}
	markup.InlineKeyboard = rows
	_, _ = b.bot.Send(tb.ChatID(chatID), msg, markup)
}

// HandleAutopost ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
func (b *Bot) HandleAutopost(c tb.Context) error {
	data := c.Callback().Data
	userID := c.Sender().ID

	if data == "autopost:disable" {
		_ = storage.SetUserAutopost(b.db, userID, []string{})
		_ = c.Respond(&tb.CallbackResponse{Text: "‚ùå –ê–≤—Ç–æ–ø–æ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω"})
		b.ShowAutopostMenu(userID)
		return nil
	}

	if strings.HasPrefix(data, "autopost:set:") {
		t := strings.TrimPrefix(data, "autopost:set:")
		current, _ := storage.GetUserAutopost(b.db, userID)
		if len(current) >= 6 {
			_ = c.Respond(&tb.CallbackResponse{Text: "‚ö†Ô∏è –ú–æ–∂–Ω–æ –º–∞–∫—Å–∏–º—É–º 6"})
			return nil
		}
		for _, tt := range current {
			if tt == t {
				_ = c.Respond(&tb.CallbackResponse{Text: "‚è≥ –£–∂–µ –≤—ã–±—Ä–∞–Ω–æ"})
				return nil
			}
		}
		current = append(current, t)
		_ = storage.SetUserAutopost(b.db, userID, current)
		_ = c.Respond(&tb.CallbackResponse{Text: "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ " + t})
		b.ShowAutopostMenu(userID)
	}
	return nil
}

// StartNewsUpdater –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ—Ä–∞—Å—Å—ã–ª–∫—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (b *Bot) StartNewsUpdater() {
	loc, _ := time.LoadLocation("Europe/Moscow")
	ticker := time.NewTicker(1 * time.Minute)
	defer ticker.Stop()

	for now := range ticker.C {
		mskNow := now.In(loc)
		hhmm := mskNow.Format("15:04")
		users, _ := storage.GetAllAutopostUsers(b.db)
		for userID, times := range users {
			for _, t := range times {
				if t == hhmm {
					news, _ := storage.GetTodayNewsPageForUser(b.db, userID, 1, 8)
					if len(news) == 0 {
						continue
					}
					text := "üì∞ –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
					for _, n := range news {
						text += fmt.Sprintf("‚Ä¢ %s\nüîó %s\n\n", n.Title, n.Link)
					}
					b.SendMessage(userID, text)
				}
			}
		}
	}
}
