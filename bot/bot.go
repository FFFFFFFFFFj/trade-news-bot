package bot

import (
	"database/sql"
	"fmt"
	"log"
	"strings"
	"time"

	"github.com/FFFFFFFFFFj/trade-news-bot/storage"
	"github.com/FFFFFFFFFFj/trade-news-bot/rss"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É Telegram-–±–æ—Ç–∞
type Bot struct {
	Token   string
	APIBase string
	db      *sql.DB
}

// New —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func New(token string, db *sql.DB) *Bot {
	return &Bot{
		Token:   token,
		APIBase: "https://api.telegram.org/bot" + token + "/",
		db:      db,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
func (b *Bot) Start() {
	log.Println("Bot started ...")
	var offset int
	for {
		updates, err := b.GetUpdates(offset, 30)
		if err != nil {
			if strings.Contains(err.Error(), "Client.Timeout") {
				continue
			}
			log.Printf("getUpdates error: %v", err)
			time.Sleep(3 * time.Second)
			continue
		}
		for _, u := range updates {
			offset = u.UpdateID + 1
			if u.Message != nil {
				b.HandleMessage(u.Message)
			}
		}
	}
}

// StartNewsUpdater –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π
func (b *Bot) StartNewsUpdater(sources []string, interval time.Duration) {
	go func() {
		for {
			for _, sourceURL := range sources {
				items, err := rss.Fetch(sourceURL)
				if err != nil {
					log.Printf("RSS fetch error (%s): %v", sourceURL, err)
					continue
				}
				for _, item := range items {
					if err := storage.SaveNews(b.db, item, sourceURL); err != nil {
						log.Printf("SaveNews error: %v", err)
					}
				}
			}
			time.Sleep(interval)
		}
	}()
}

// StartBroadcastScheduler –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∑–∞–¥–∞–Ω–Ω—ã–µ —á–∞—Å—ã (–≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞).
// schedule - —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM" (–Ω–∞–ø—Ä–∏–º–µ—Ä: []string{"09:00","15:00","21:00"})
// since - –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä 8*time.Hour) ‚Äî –±—É–¥–µ–º –±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏, —Å—Ç–∞—Ä—à–µ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç —Å–º—ã—Å–ª–∞ —Ä–∞—Å—Å—ã–ª–∞—Ç—å.
func (b *Bot) StartBroadcastScheduler(schedule []string, since time.Duration) {
	go func() {
		for {
			now := time.Now().Format("15:04")
			for _, t := range schedule {
				if now == t {
					// –≤—ã—á–∏—Å–ª–∏–º –≥—Ä–∞–Ω–∏—Ü—É sinceTime
					sinceTime := time.Now().Add(-since)
					// –ø–æ–ª—É—á–∏–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
					users, err := storage.GetUsersWithSubscriptions(b.db)
					if err != nil {
						log.Printf("GetUsersWithSubscriptions error: %v", err)
						continue
					}
					for _, uid := range users {
						items, err := storage.GetRecentNewsForUser(b.db, uid, sinceTime)
						if err != nil {
							log.Printf("GetRecentNewsForUser error for %d: %v", uid, err)
							continue
						}
						if len(items) == 0 {
							continue
						}
						for _, it := range items {
							msg := fmt.Sprintf("üì∞ %s\nüïí %s\nüîó %s\n\n", it.Title, it.PubDate, it.Link)
							_ = b.SendMessage(uid, msg) // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π ‚Äî –ª–æ–≥ –≤ SendMessage
						}
					}
				}
			}
			time.Sleep(60 * time.Second) // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
		}
	}()
}

// StartNewsCleaner —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤ (–æ–¥–∏–Ω —Ä–∞–∑ –≤ –¥–µ–Ω—å)
func (b *Bot) StartNewsCleaner() {
	go func() {
		for {
			_, err := b.db.Exec("DELETE FROM news WHERE pub_date < NOW() - INTERVAL '24 hours'")
			if err != nil {
				log.Printf("Clean old news error: %v", err)
			}
			// –∑–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑ –≤ 24 —á–∞—Å–∞
			time.Sleep(24 * time.Hour)
		}
	}()
}
